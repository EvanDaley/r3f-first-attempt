{"version":3,"sources":["components/three_components/objects/LinesRobot.js","components/three_components/objects/AbstractSphere.js","components/three_components/ThreeCanvas.js","components/html_components/Menu.js","components/html_components/HTMLContent.js","App.js","reportWebVitals.js","index.js"],"names":["filePath","window","location","href","useGLTF","preload","AbstractSphere","props","group","useRef","nodes","materials","console","log","useFrame","clock","t","Math","sin","getElapsedTime","current","position","y","rotation","x","z","ref","dispose","castShadow","receiveShadow","geometry","Icosphere003","material","scale","MeshDistortMaterial","color","flatShading","roughness","metalness","factor","speed","wireframe","App","colorManagement","invalidateFrameloop","pixelRatio","PerspectiveCamera","makeDefault","fallback","Stage","adjustCamera","environment","intensity","contactShadow","shadows","OrbitControls","target","MenuContent","setSelection","overlayContentStyle","top","width","textAlign","marginTop","fontSize","buttonStyle","background","border","padding","fontFamily","textDecoration","cursor","style","pointerEvents","height","zIndex","left","backgroundImage","overflowX","transition","onClick","AboutMe","backgroundColor","display","marginRight","HTMLContent","useState","inMenu","setInMenu","selection","justifyContent","right","open","bind","this","strokeWidth","animationDuration","className","ThreeCanvas","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f8a2e69.chunk.js","sourcesContent":["/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef, useMemo } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from \"@react-three/fiber\"\r\n\r\nconst filePath = window.location.href + '/models/Robot.glb'\r\n\r\nexport default function LinesRobot(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0,\r\n    metalness: 0.65,\r\n    roughness: 0.3,\r\n    color: 'blue',\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    'normalMap-wrapS': THREE.RepeatWrapping,\r\n    'normalMap-wrapT': THREE.RepeatWrapping,\r\n    'normalMap-repeat': [30, 30],\r\n    'normalMap-anisotropy': 16,\r\n    transmission: 0.6,\r\n    transparent: true\r\n  }\r\n\r\n  const group = useRef()\r\n  const { nodes, materials } = useGLTF(filePath)\r\n\r\n  const edges = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_1.geometry), [nodes])\r\n  const edges1 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_2.geometry), [nodes])\r\n  const edges2 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])\r\n  const edges3 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])\r\n\r\n  // Rotate mesh every frame, this is outside of React without overhead\r\n  useFrame(() => {\r\n    if (group.current != null) {\r\n      group.current.rotation.y = group.current.rotation.y += 0.01\r\n    }\r\n  })\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <group position={[0, .85, 0]}>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_1.geometry}\r\n          material={materials.Mat1}\r\n        >\r\n        </mesh>\r\n        <lineSegments geometry={edges}>\r\n          <lineBasicMaterial color=\"black\" />\r\n        </lineSegments>\r\n        <lineSegments geometry={edges1}>\r\n          <lineBasicMaterial color=\"black\" />\r\n        </lineSegments>\r\n        <lineSegments geometry={edges2}>\r\n          <lineBasicMaterial color=\"black\"  />\r\n        </lineSegments>\r\n        <lineSegments geometry={edges3}>\r\n          <lineBasicMaterial color=\"black\" />\r\n        </lineSegments>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_2.geometry}\r\n          material={materials.Mat2}\r\n        />\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n          <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} />\r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_4.geometry}\r\n          material={materials.Mat4}\r\n        >\r\n\r\n        </mesh>\r\n      </group>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Cube002.geometry}\r\n        material={materials['Material.001']}\r\n        position={[0, .85, 0.03]}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} transmission={.9} />\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef } from 'react'\r\nimport { useGLTF, useTexture, MeshDistortMaterial, Shadow } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from '@react-three/fiber'\r\n\r\nconst filePath = window.location.href + '/models/AbstractSphere.glb'\r\n\r\nexport default function AbstractSphere(props) {\r\n  // const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  // const materialProps = {\r\n  //   clearcoat: 1.0,\r\n  //   clearcoatRoughness: 0,\r\n  //   metalness: 0.65,\r\n  //   roughness: 0.3,\r\n  //   color: 'blue',\r\n  //   normalMap: texture,\r\n  //   normalScale: [0.3, 0.3],\r\n  //   'normalMap-wrapS': THREE.RepeatWrapping,\r\n  //   'normalMap-wrapT': THREE.RepeatWrapping,\r\n  //   'normalMap-repeat': [30, 30],\r\n  //   'normalMap-anisotropy': 16,\r\n  //   transmission: 0.6,\r\n  //   transparent: true\r\n  // }\r\n\r\n  // const material1 = new THREE.MeshPhysicalMaterial(materialProps)\r\n  // console.log(material1)\r\n\r\n  const group = useRef()\r\n  const { nodes, materials } = useGLTF(filePath)\r\n  // console.log(materials)\r\n  console.log(nodes, materials)\r\n\r\n  // console.log(materials.Mat1)\r\n\r\n  useFrame(({ clock }) => {\r\n    const t = (1 + Math.sin(clock.getElapsedTime() * 1.5)) / 2\r\n    group.current.position.y = (t / 3) + 1.1\r\n    // shadow.current.scale.y = shadow.current.scale.z = 1 + t\r\n    // shadow.current.scale.x = (1 + t) * 1.25\r\n    group.current.rotation.x = group.current.rotation.z += 0.005\r\n    // group.current.position.x = THREE.MathUtils.lerp(group.current.position.x, state.mouse[0] / 2, 0.05)\r\n    // group.current.position.z = THREE.MathUtils.lerp(group.current.position.z, state.mouse[1] / 4, 0.03)\r\n  })\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null} position={[0, 1.1, 0]}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Icosphere003.geometry}\r\n        material={nodes.Icosphere003.material}\r\n        scale={[1.06, 1.06, 1.06]}\r\n      >\r\n        <mesh geometry={nodes.Icosphere003.geometry} castShadow receiveShadow>\r\n          <MeshDistortMaterial color=\"#ffffff\" flatShading roughness={1} metalness={0.5} factor={15} speed={5} />\r\n        </mesh>\r\n        <mesh geometry={nodes.Icosphere003.geometry}>\r\n          <meshBasicMaterial wireframe />\r\n        </mesh>\r\n      </mesh>\r\n      {/* <group position={[0,.85, 0]}>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_1.geometry}\r\n          material={materials.Mat1}\r\n        >\r\n\r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_2.geometry}\r\n          material={materials.Mat2}\r\n        />\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n         <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} /> \r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_4.geometry}\r\n          material={materials.Mat4}\r\n        >\r\n          \r\n        </mesh>\r\n      </group>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Cube002.geometry}\r\n        material={materials['Material.001']}\r\n        position={[0, .85, 0.03]}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} transmission={.9}/>\r\n\r\n      </mesh> */}\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import LinesRobot from './objects/LinesRobot'\r\nimport AbstractSphere from './objects/AbstractSphere'\r\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport { Suspense } from 'react'\r\n\r\nfunction App() {\r\n  const environmentOptions = [\r\n    'sunset',\r\n    'dawn',\r\n    'night',\r\n    'warehouse',\r\n    'forest',\r\n    'apartment',\r\n    'studio',\r\n    'city',\r\n    'park',\r\n    'lobby',\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <Canvas colorManagement={true} invalidateFrameloop pixelRatio={[1, 2]}>\r\n        <PerspectiveCamera makeDefault position={[1, 6, 10]} />\r\n\r\n        {/* <directionalLight position={[-10, -10, -5]} intensity={1} /> */}\r\n        {/* <ambientLight /> */}\r\n        {/* <pointLight position={[10, 10, 10]} /> */}\r\n\r\n        <Suspense fallback={null}>\r\n          <Stage adjustCamera={false} environment={environmentOptions[0]} intensity={.5} contactShadow={true} shadows={true}>\r\n            {/* <LinesRobot /> */}\r\n            <AbstractSphere/>\r\n          </Stage>\r\n        </Suspense>\r\n\r\n        {/* <Stats /> */}\r\n        <OrbitControls target={[0, 1, 0]} />\r\n      </Canvas>\r\n\r\n      {/* <Loader /> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// Header\r\n// This contains the menu.\r\n\r\nimport { HamburgerButton } from \"react-hamburger-button\";\r\nimport React, { useState } from 'react';\r\n\r\nfunction MenuContent({ setSelection }) {\r\n  const overlayStyle = {\r\n    pointerEvents: \"auto\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    position: \"fixed\",\r\n    zIndex: \"1\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n    backgroundImage: \"linear-gradient(90deg, #134E5E 10%, #71B280 90%)\",\r\n    overflowX: \"hidden\",\r\n    transition: \"0.1s\"\r\n  }\r\n\r\n  const overlayContentStyle = {\r\n    position: \"relative\",\r\n    top: \"25%\",\r\n    width: \"100%\",\r\n    textAlign: \"center\",\r\n    marginTop: \"48px\",\r\n    fontSize: \"40px\"\r\n  }\r\n\r\n  const buttonStyle = {\r\n    color: \"white\",\r\n    fontSize: '40px',\r\n    background: \"none\",\r\n    border: \"none\",\r\n    padding: \"0!important\",\r\n    fontFamily: \"arial, sans-serif\",\r\n    textDecoration: \"none\",\r\n    cursor: \"pointer\",\r\n  }\r\n\r\n  return (\r\n    <div style={overlayStyle}>\r\n      <div style={overlayContentStyle}>\r\n        <ul>\r\n          <ol style={overlayContentStyle}>\r\n            <button style={buttonStyle} onClick={() => setSelection('home')}>Home</button>\r\n          </ol>\r\n          <ol style={overlayContentStyle}>\r\n            <button style={buttonStyle} onClick={() => setSelection('about-me')}>About Me</button>\r\n          </ol>\r\n          <ol style={overlayContentStyle}>\r\n            <button style={buttonStyle} onClick={() => setSelection('get-in-touch')}>Get in Touch</button>\r\n          </ol>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// TODO: Move this out into a seperate component.\r\nfunction AboutMe() {\r\n  const overlayStyle = {\r\n    pointerEvents: \"auto\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    position: \"fixed\",\r\n    zIndex: \"1\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n    backgroundColor: \"black\",\r\n    color: \"white\",\r\n    overflowX: \"hidden\",\r\n    transition: \"0.1s\"\r\n  }\r\n\r\n  const overlayContentStyle = {\r\n    display: \"flex\",\r\n    position: \"relative\",\r\n    top: \"25%\",\r\n    width: \"100%\",\r\n    textAlign: \"left\",\r\n    marginTop: \"48px\",\r\n    fontSize: \"25px\",\r\n  }\r\n\r\n  return (\r\n    <div style={overlayStyle}>\r\n      <div style={overlayContentStyle}>\r\n        <div style={{ width: \"30%\", display: \"inline\", textAlign: \"right\", marginRight: \"20px\" }}>\r\n          <p>[Image]</p>\r\n        </div>\r\n        <div style={{ width: \"50%\", display: \"inline\" }}>\r\n          <p>My name is Evan Daley and I'm a Lead Software Engineer at Two Barrels LLC. </p>\r\n          <p>I consider myself to be an experienced developer, leader and architect. My strongest proficiencies are JavaScript, Vue, React, Rails, AWS, Docker, and SQL. </p>\r\n          <p>In my free time, I like to exercise, sleep, and dig into different technologies like R, Kubernetes, GCP, and three.js. Lately I've been a bit obsessed with three.js and react-three-fiber, so thats why this site exists. </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default function HTMLContent() {\r\n  const [inMenu, setInMenu] = useState(false);\r\n  const [selection, setSelection] = useState('');\r\n\r\n  const handleClick = () => {\r\n    setInMenu(!inMenu)\r\n    setSelection('')\r\n  }\r\n\r\n  const headerStyle = {\r\n    pointerEvents: \"none\",\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n    zIndex: \"2\",\r\n    width: \"100%\",\r\n    padding: \"40px\",\r\n    position: \"fixed\",\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div style={headerStyle}>\r\n        <div style={{ right: \"24px\", pointerEvents: \"auto\" }}>\r\n          <HamburgerButton\r\n            open={inMenu}\r\n            onClick={handleClick.bind(this)}\r\n            width={25}\r\n            height={20}\r\n            strokeWidth={2.5}\r\n            color='white'\r\n            animationDuration={0.5}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {inMenu ? <MenuContent setSelection={setSelection} /> : null}\r\n      {selection === 'about-me' ? <AboutMe /> : null}\r\n    </>\r\n  )\r\n}","// HTMLContent.js\r\n// Throw all the raw HTML content here. This is all rendered outside the context of the canvas,\r\n// so don't try to do anything fancy with Three.js.\r\n\r\nimport Menu from './Menu'\r\n\r\nexport default function HTMLContent() {\r\n  return (\r\n    <div className=\"html-content-container\">\r\n      <Menu/>\r\n\r\n    </div>\r\n  )\r\n}","import './App.css';\r\nimport ThreeCanvas from './components/three_components/ThreeCanvas'\r\nimport HTMLContent from './components/html_components/HTMLContent'\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <HTMLContent/>\r\n      <ThreeCanvas/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}