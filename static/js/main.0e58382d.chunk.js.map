{"version":3,"sources":["components/Box.js","App.js","reportWebVitals.js","index.js"],"names":["Box","props","mesh","useRef","useState","hovered","setHover","active","setActive","useSpring","scale","color","useFrame","current","rotation","x","y","ref","onClick","event","onPointerOver","onPointerOut","args","meshStandardMaterial","App","position","OrbitControls","Stats","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAIe,SAASA,EAAIC,GAExB,IAAMC,EAAOC,mBAGb,EAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEA,EAAsBC,oBAAU,CAC9BC,MAAMH,EAAS,CAAC,IAAI,IAAI,KAAO,CAAC,EAAE,EAAE,GACpCI,MAAON,EAAU,UAAY,WAFxBK,EAAP,EAAOA,MAAMC,EAAb,EAAaA,MAab,OARAC,aAAS,WACY,MAAhBV,EAAKW,UACNX,EAAKW,QAAQC,SAASC,EAAIb,EAAKW,QAAQC,SAASE,GAAK,QAOvD,eAAC,WAASd,KAAV,2BACMD,GADN,IAEEgB,IAAKf,EACLQ,MAAOA,EACPQ,QAAS,SAACC,GAAD,OAAWX,GAAWD,IAC/Ba,cAAe,SAACD,GAAD,OAAWb,GAAS,IACnCe,aAAc,SAACF,GAAD,OAAWb,GAAS,IANpC,UAOE,mCAAmBgB,KAAM,CAAC,EAAG,EAAG,KAChC,cAAC,WAASC,qBAAV,CAA+BZ,MAAOA,Q,oBCZ/Ba,MAjBf,WAGE,OACE,mCACA,eAAC,IAAD,WACE,iCACA,4BAAYC,SAAU,CAAC,GAAI,GAAI,MAC/B,cAACC,EAAA,EAAD,IACA,cAAC1B,EAAD,CAAKyB,SAAU,EAAE,IAAK,EAAG,KACzB,cAACzB,EAAD,CAAKyB,SAAU,CAAC,IAAK,EAAG,KACxB,cAACE,EAAA,EAAD,UCJSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0e58382d.chunk.js","sourcesContent":["import { useSpring, animated } from \"@react-spring/three\"\nimport { useFrame } from \"@react-three/fiber\"\nimport { useRef, useState } from \"react\"\n\nexport default function Box(props) {\n    // This reference will give us direct access to the mesh\n    const mesh = useRef()\n  \n    // Set up state for the hovered and active state\n    const [hovered, setHover] = useState(false)\n    const [active, setActive] = useState(false)\n  \n    const {scale,color} = useSpring({\n      scale:active ? [1.5,1.5,1.5] : [1,1,1],\n      color: hovered ? 'hotpink' : 'orange'\n    })\n    // Rotate mesh every frame, this is outside of React without overhead\n    useFrame(() => {\n      if(mesh.current != null){\n        mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n      }\n    })\n\n\n  \n    return (\n      <animated.mesh\n        {...props}\n        ref={mesh}\n        scale={scale}\n        onClick={(event) => setActive(!active)}\n        onPointerOver={(event) => setHover(true)}\n        onPointerOut={(event) => setHover(false)}>\n        <boxBufferGeometry args={[1, 1, 1]} />\n        <animated.meshStandardMaterial color={color} />\n      </animated.mesh>\n    )\n  }","import './App.css';\nimport Box from './components/Box';\nimport { OrbitControls, Stats } from '@react-three/drei';\nimport { Canvas } from '@react-three/fiber';\n\nfunction App() {\n\n\n  return (\n    <>\n    <Canvas>\n      <ambientLight />\n      <pointLight position={[10, 10, 10]} />\n      <OrbitControls />\n      <Box position={[-1.2, 0, 0]} />\n      <Box position={[1.2, 0, 0]} />\n      <Stats />\n    </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}