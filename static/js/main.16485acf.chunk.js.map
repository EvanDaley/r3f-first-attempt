{"version":3,"sources":["components/Box.js","components/Robot.js","Stork.js","App.js","reportWebVitals.js","index.js"],"names":["Box","props","meshRef","useRef","useState","hovered","setHover","active","setActive","useSpring","config","duration","scale","color","useFrame","current","rotation","x","y","mesh","ref","onClick","event","onPointerOver","onPointerOut","args","meshStandardMaterial","useGLTF","preload","Model","group","nodes","materials","animations","actions","useAnimations","console","log","dispose","name","geometry","Object_0","material","Material_0_COLOR_0","morphTargetDictionary","morphTargetInfluences","Math","PI","App","position","OrbitControls","fallback","Html","Stats","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAIe,SAASA,EAAIC,GAE1B,IAAMC,EAAUC,mBAGhB,EAA4BC,oBAAS,GAArC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA4BF,oBAAS,GAArC,mBAAOG,EAAP,KAAeC,EAAf,KAGA,EAAyBC,oBAAU,CACjCC,OAAQ,CAAEC,SAAU,KACpBC,MAAOL,EAAS,CAAC,IAAK,IAAK,KAAO,CAAC,EAAG,EAAG,GACzCM,MAAOR,EAAU,QAAU,UAHrBO,EAAR,EAAQA,MAAOC,EAAf,EAAeA,MAaf,OANAC,aAAS,WACgB,MAAnBZ,EAAQa,UACVb,EAAQa,QAAQC,SAASC,EAAIf,EAAQa,QAAQC,SAASE,GAAK,QAK7D,eAAC,WAASC,KAAV,2BACMlB,GADN,IAEEmB,IAAKlB,EACLU,MAAOA,EACPS,QAAS,SAACC,GAAD,OAAWd,GAAWD,IAC/BgB,cAAe,SAACD,GAAD,OAAWhB,GAAS,IACnCkB,aAAc,SAACF,GAAD,OAAWhB,GAAS,IANpC,UAOE,mCAAmBmB,KAAM,CAAC,EAAG,EAAG,KAChC,cAAC,WAASC,qBAAV,CAA+Bb,MAAOA,Q,YCX5Cc,IAAQC,QAAQ,c,YCjBD,SAASC,EAAM5B,GAC5B,IAAM6B,EAAQ3B,mBACd,EAAyCwB,YAAQ,cAAzCI,EAAR,EAAQA,MAAOC,EAAf,EAAeA,UAAWC,EAA1B,EAA0BA,WAClBC,EAAYC,YAAcF,EAAYH,GAAtCI,QAER,OADAE,QAAQC,IAAIH,GAEV,+CAAOd,IAAKU,GAAW7B,GAAvB,IAA8BqC,QAAS,KAAvC,SACE,sBACEC,KAAK,WACLC,SAAUT,EAAMU,SAASD,SACzBE,SAAUV,EAAUW,mBACpBC,sBAAuBb,EAAMU,SAASG,sBACtCC,sBAAuBd,EAAMU,SAASI,sBACtC7B,SAAU,CAAC8B,KAAKC,GAAK,EAAG,EAAG,QAMnCpB,IAAQC,QAAQ,c,4BCEDoB,MApBf,WACE,OACE,mCACE,eAAC,IAAD,WACE,iCACA,4BAAYC,SAAU,CAAC,GAAI,GAAI,MAC/B,cAACC,EAAA,EAAD,IACA,cAAC,WAAD,CAAUC,SAAU,cAACC,EAAA,EAAD,wBAApB,SACE,cAAC,EAAD,MAGF,cAACpD,EAAD,CAAKiD,SAAU,CAAC,IAAK,EAAG,KACxB,cAACjD,EAAD,CAAKiD,SAAU,EAAE,IAAK,IAAK,KAC3B,cAACjD,EAAD,CAAKiD,SAAU,CAAC,IAAK,IAAK,KAC1B,cAACI,EAAA,EAAD,UCVOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.16485acf.chunk.js","sourcesContent":["import { useSpring, animated } from \"@react-spring/three\"\nimport { useFrame } from \"@react-three/fiber\"\nimport { useRef, useState } from \"react\"\n\nexport default function Box(props) {\n  // This reference will give us direct access to the mesh\n  const meshRef = useRef()\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n\n  // useSpring will gracefully interpolate between different states.\n  const { scale, color } = useSpring({\n    config: { duration: 450 },\n    scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n    color: hovered ? 'white' : 'black'\n  })\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    if (meshRef.current != null) {\n      meshRef.current.rotation.x = meshRef.current.rotation.y += 0.01\n    }\n  })\n\n  return (\n    <animated.mesh\n      {...props}\n      ref={meshRef}\n      scale={scale}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <animated.meshStandardMaterial color={color} />\n    </animated.mesh>\n  )\n}","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef } from 'react'\nimport { useGLTF } from '@react-three/drei'\n\nexport default function Model(props) {\n  const group = useRef()\n  const { nodes, materials } = useGLTF('/robot.glb')\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group position={[0, 1.33, 0]}>\n        <mesh geometry={nodes.Cube003.geometry} material={materials.Mat1} />\n        <mesh geometry={nodes.Cube003_1.geometry} material={materials.Mat2} />\n        <mesh geometry={nodes.Cube003_2.geometry} material={materials.Mat3} />\n        <mesh geometry={nodes.Cube003_3.geometry} material={materials.Mat4} />\n      </group>\n      <mesh geometry={nodes.Cube001.geometry} material={nodes.Cube001.material} position={[0, 1.33, 0]} />\n      <mesh geometry={nodes.Cube002.geometry} material={materials['Material.001']} position={[0, 1.33, 0.03]} />\n    </group>\n  )\n}\n\nuseGLTF.preload('/robot.glb')\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef } from 'react'\nimport { useGLTF, useAnimations } from '@react-three/drei'\n\nexport default function Model(props) {\n  const group = useRef()\n  const { nodes, materials, animations } = useGLTF('/stork.glb')\n  const { actions } = useAnimations(animations, group)\n  console.log(actions)\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        name=\"Object_0\"\n        geometry={nodes.Object_0.geometry}\n        material={materials.Material_0_COLOR_0}\n        morphTargetDictionary={nodes.Object_0.morphTargetDictionary}\n        morphTargetInfluences={nodes.Object_0.morphTargetInfluences}\n        rotation={[Math.PI / 2, 0, 0]}\n      />\n    </group>\n  )\n}\n\nuseGLTF.preload('/stork.glb')\n","import './App.css';\nimport Box from './components/Box';\nimport Robot from './components/Robot';\nimport Stork from './Stork'\nimport { OrbitControls, Stats, Html } from '@react-three/drei';\nimport { Canvas } from '@react-three/fiber';\nimport { Suspense } from 'react'\n\nfunction App() {\n  return (\n    <>\n      <Canvas>\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        <OrbitControls />\n        <Suspense fallback={<Html>loading..</Html>}>\n          <Stork/>\n        </Suspense>\n\n        <Box position={[1.2, 0, 0]} />\n        <Box position={[-1.2, 2.2, 0]} />\n        <Box position={[1.2, 2.2, 0]} />\n        <Stats />\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}