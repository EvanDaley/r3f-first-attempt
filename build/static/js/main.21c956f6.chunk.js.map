{"version":3,"sources":["components/objects/Robot.js","components/objects/Box.js","App.js","reportWebVitals.js","index.js"],"names":["filePath","window","location","href","Robot","props","materialProps","clearcoat","clearcoatRoughness","metalness","roughness","color","normalMap","useTexture","normalScale","THREE","transmission","transparent","group","useRef","useGLTF","nodes","materials","console","log","ref","dispose","position","castShadow","receiveShadow","geometry","Cube001_1","material","Mat1","Cube001_2","Mat2","Cube001_3","Mat3","side","Cube001_4","Mat4","Cube002","preload","Box","meshRef","useState","hovered","setHover","useSpring","config","duration","scale","useFrame","current","rotation","x","y","mesh","onPointerOver","event","onPointerOut","args","meshStandardMaterial","App","colorManagement","invalidateFrameloop","pixelRatio","camera","intensity","fallback","Stage","environment","contactShadow","shadows","PerspectiveCamera","makeDefault","OrbitControls","target","Stats","Loader","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21c956f6.chunk.js","sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef } from 'react'\nimport { useGLTF, useTexture } from '@react-three/drei'\nimport * as THREE from 'three'\n\nconst filePath = window.location.href + '/models/Robot.glb'\n\nexport default function Robot(props) {\n  const texture = useTexture(window.location.href + '/images/flakes.png')\n\n  const materialProps = {\n    clearcoat: 1.0,\n    clearcoatRoughness: 0,\n    metalness: 0.65,\n    roughness: 0.3,\n    color: 'blue',\n    normalMap: texture,\n    normalScale: [0.3, 0.3],\n    'normalMap-wrapS': THREE.RepeatWrapping,\n    'normalMap-wrapT': THREE.RepeatWrapping,\n    'normalMap-repeat': [30, 30],\n    'normalMap-anisotropy': 16,\n    transmission: 0.6,\n    transparent: true\n  }\n\n  const group = useRef()\n  const { nodes, materials } = useGLTF(filePath)\n  console.log(materials)\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group position={[0,.85, 0]}>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_1.geometry}\n          material={materials.Mat1}\n        >\n\n        </mesh>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_2.geometry}\n          material={materials.Mat2}\n        />\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_3.geometry}\n          material={materials.Mat3}\n        >\n        </mesh>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_3.geometry}\n          material={materials.Mat3}\n        >\n         <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} /> \n        </mesh>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_4.geometry}\n          material={materials.Mat4}\n        >\n          \n        </mesh>\n      </group>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Cube002.geometry}\n        material={materials['Material.001']}\n        position={[0, .85, 0.03]}\n      >\n        <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} transmission={.9}/>\n\n      </mesh>\n    </group>\n  )\n}\n\nuseGLTF.preload(filePath)\n","import { useSpring, animated } from \"@react-spring/three\"\nimport { useFrame } from \"@react-three/fiber\"\nimport { useRef, useState } from \"react\"\n\nexport default function Box(props) {\n  // This reference will give us direct access to the mesh\n  const meshRef = useRef()\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  // const [active, setActive] = useState(false)\n\n  // useSpring will gracefully interpolate between different states.\n  const { scale, color } = useSpring({\n    config: { duration: 450 },\n    scale: hovered ? [.45,.45,.45] : [.4, .4, .4],\n    color: hovered ? 'green' : 'black'\n  })\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    if (meshRef.current != null) {\n      meshRef.current.rotation.x = meshRef.current.rotation.y += 0.01\n    }\n  })\n\n  return (\n    <animated.mesh\n      {...props}\n      ref={meshRef}\n      scale={scale}\n      // onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <icosahedronBufferGeometry args={[1, 1, 1]} />\n      <animated.meshStandardMaterial color={color} />\n    </animated.mesh>\n  )\n}","import './App.css';\n// import Monkey from './components/objects/Monkey'\nimport Robot from './components/objects/Robot'\nimport Box from './components/objects/Box'\nimport LoadingScreen from './components/html_scenes/LoadingScreen'\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera } from '@react-three/drei';\nimport { Canvas } from '@react-three/fiber';\nimport { Suspense } from 'react'\n\n// Environment options:\n//   sunset\n//   dawn\n//   night\n//   warehouse\n//   forest\n//   apartment`\n//   studio\n//   city\n//   park\n//   lobby\n\nfunction App() {\n  return (\n    <>\n      {/* <LoadingScreen/> */}\n\n      <Canvas colorManagement={true} invalidateFrameloop pixelRatio={[1, 2]} camera={{ position: [0, 200, 2.75] }}>\n        <directionalLight position={[10, 10, 5]} intensity={1} />\n        <directionalLight position={[-10, -10, -5]} intensity={1} />\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n\n        <Suspense fallback={null}>\n          <Stage environment=\"sunset\" intensity={.5} contactShadow={true} shadows={true}>\n            <Robot />\n            <Box position={[0,1,0]}/>\n          </Stage>\n        </Suspense>\n\n        <PerspectiveCamera makeDefault />\n        <OrbitControls target={[0,1,0]}/>\n        <Stats />\n      </Canvas>\n\n      <Loader />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}