{"version":3,"sources":["components/objects/LinesRobot.js","components/objects/Glass.js","App.js","reportWebVitals.js","index.js"],"names":["filePath","window","location","href","LinesRobot","props","materialProps","clearcoat","clearcoatRoughness","metalness","roughness","color","normalMap","useTexture","normalScale","THREE","transmission","transparent","material1","console","log","group","useRef","useGLTF","nodes","materials","edges","useMemo","Cube001_1","geometry","edges1","Cube001_2","edges2","Cube001_3","edges3","Mat1","ref","dispose","position","castShadow","receiveShadow","material","Mat2","Mat3","side","Cube001_4","Mat4","Cube002","preload","App","colorManagement","invalidateFrameloop","pixelRatio","camera","intensity","fallback","Stage","environment","contactShadow","shadows","PerspectiveCamera","makeDefault","OrbitControls","target","Stats","Loader","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9410a784.chunk.js","sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useMemo } from 'react'\nimport { useGLTF, useTexture } from '@react-three/drei'\nimport * as THREE from 'three'\n\nconst filePath = window.location.href + '/models/Robot.glb'\n\nexport default function LinesRobot(props) {\n  const texture = useTexture(window.location.href + '/images/flakes.png')\n\n  const materialProps = {\n    clearcoat: 1.0,\n    clearcoatRoughness: 0,\n    metalness: 0.65,\n    roughness: 0.3,\n    color: 'blue',\n    normalMap: texture,\n    normalScale: [0.3, 0.3],\n    'normalMap-wrapS': THREE.RepeatWrapping,\n    'normalMap-wrapT': THREE.RepeatWrapping,\n    'normalMap-repeat': [30, 30],\n    'normalMap-anisotropy': 16,\n    transmission: 0.6,\n    transparent: true\n  }\n\n  const material1 = new THREE.MeshPhysicalMaterial(materialProps)\n  console.log(material1)\n\n  const group = useRef()\n  const { nodes, materials } = useGLTF(filePath)\n  console.log(materials)\n\n  const edges = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_1.geometry), [nodes])\n  const edges1 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_2.geometry), [nodes])\n  const edges2 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])\n  const edges3 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])\n\n  console.log(materials.Mat1)\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group position={[0, .85, 0]}>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_1.geometry}\n          material={materials.Mat1}\n        >\n        </mesh>\n        <lineSegments geometry={edges}>\n          <lineBasicMaterial color=\"black\" />\n        </lineSegments>\n        <lineSegments geometry={edges1}>\n          <lineBasicMaterial color=\"black\" />\n        </lineSegments>\n        <lineSegments geometry={edges2}>\n          <lineBasicMaterial color=\"black\"  />\n        </lineSegments>\n        <lineSegments geometry={edges3}>\n          <lineBasicMaterial color=\"black\" />\n        </lineSegments>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_2.geometry}\n          material={materials.Mat2}\n        />\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_3.geometry}\n          material={materials.Mat3}\n        >\n        </mesh>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_3.geometry}\n          material={materials.Mat3}\n        >\n          <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} />\n        </mesh>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_4.geometry}\n          material={materials.Mat4}\n        >\n\n        </mesh>\n      </group>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Cube002.geometry}\n        material={materials['Material.001']}\n        position={[0, .85, 0.03]}\n      >\n        <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} transmission={.9} />\n\n      </mesh>\n    </group>\n  )\n}\n\nuseGLTF.preload(filePath)\n","import React, { useRef } from 'react'\nimport { useGLTF, useTexture } from '@react-three/drei'\nimport * as THREE from 'three'\n\nconst filePath = window.location.href + '/models/GlassExperimentation.glb'\n\nexport default function Glass(props) {\n  const texture = useTexture(window.location.href + '/images/flakes.png')\n\n  const materialProps = {\n    clearcoat: 1.0,\n    clearcoatRoughness: 0,\n    metalness: 0.65,\n    roughness: 0.3,\n    color: 'blue',\n    normalMap: texture,\n    normalScale: [0.3, 0.3],\n    'normalMap-wrapS': THREE.RepeatWrapping,\n    'normalMap-wrapT': THREE.RepeatWrapping,\n    'normalMap-repeat': [30, 30],\n    'normalMap-anisotropy': 16,\n    transmission: 0.99,\n    transparent: true\n  }\n\n  const group = useRef()\n  const { nodes, materials } = useGLTF(filePath)\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Cube.geometry}\n        material={nodes.Cube.material}\n      >\n        <meshPhysicalMaterial {...materialProps} />\n      </mesh>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Cube002.geometry}\n        material={nodes.Cube002.material}\n        position={[0, 0, -3.72]}\n      >\n        <meshPhysicalMaterial {...materialProps}/>\n      </mesh>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Icosphere.geometry}\n        material={nodes.Icosphere.material}\n        position={[0, 0, 3.26]}\n        scale={[1.48, 1.48, 1.48]}\n      >\n        <meshPhysicalMaterial {...materialProps} />\n      </mesh>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Sphere.geometry}\n        material={nodes.Sphere.material}\n        position={[0, 0, -7.14]}\n      >\n        <meshPhysicalMaterial {...materialProps}  />\n      </mesh>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Cube003.geometry}\n        material={nodes.Cube003.material}\n        position={[0, 0, -3.72]}\n      >\n        <meshPhysicalMaterial {...materialProps}  />\n      </mesh>\n    </group>\n  )\n}\n\nuseGLTF.preload(filePath)\n","import './App.css';\n// import Monkey from './components/objects/Monkey'\nimport LinesRobot from './components/objects/LinesRobot'\nimport Glass from './components/objects/Glass'\nimport Box from './components/objects/Box'\nimport LoadingScreen from './components/html_scenes/LoadingScreen'\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera } from '@react-three/drei';\nimport { Canvas } from '@react-three/fiber';\nimport { Suspense } from 'react'\n\n// Environment options:\n//   sunset\n//   dawn\n//   night\n//   warehouse\n//   forest\n//   apartment`\n//   studio\n//   city\n//   park\n//   lobby\n\nfunction App() {\n  return (\n    <>\n      {/* <LoadingScreen/> */}\n\n      <Canvas colorManagement={true} invalidateFrameloop pixelRatio={[1, 2]} camera={{ position: [0, 200, 2.75] }}>\n        <directionalLight position={[10, 10, 5]} intensity={1} />\n        <directionalLight position={[-10, -10, -5]} intensity={1} />\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n\n        <Suspense fallback={null}>\n          <Stage environment=\"sunset\" intensity={.5} contactShadow={true} shadows={true}>\n          {/* <Glass></Glass> */}\n            <LinesRobot />\n            {/* <Box position={[0,1,0]}/> */}\n          </Stage>\n        </Suspense>\n\n        <PerspectiveCamera makeDefault />\n        <OrbitControls target={[0,1,0]}/>\n        <Stats />\n      </Canvas>\n\n      <Loader />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}