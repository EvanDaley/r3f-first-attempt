{"version":3,"sources":["components/Monkey.js","App.js","reportWebVitals.js","index.js"],"names":["filePath","window","location","href","Model","props","materialProps","clearcoat","clearcoatRoughness","metalness","roughness","color","normalMap","useTexture","normalScale","THREE","transmission","transparent","group","useRef","useGLTF","nodes","animations","actions","useAnimations","console","log","ref","geometry","Suzanne","side","renderOrder","preload","App","colorManagement","invalidateFrameloop","pixelRatio","camera","position","intensity","OrbitControls","fallback","Html","Stage","environment","contactShadow","shadows","Stats","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQASMA,EAAWC,OAAOC,SAASC,KAAO,cAEzB,SAASC,EAAMC,GAC5B,IAEMC,EAAgB,CACpBC,UAAW,EACXC,mBAAoB,EACpBC,UAAW,IACXC,UAAW,GACXC,MAAO,MACPC,UARcC,YAAWZ,OAAOC,SAASC,KAAO,eAShDW,YAAa,CAAC,GAAK,IACnB,kBAAmBC,iBACnB,kBAAmBA,iBACnB,mBAAoB,CAAC,GAAI,IACzB,uBAAwB,GACxBC,aAAc,GACdC,aAAa,GAITC,EAAQC,mBACd,EAA8BC,YAAQpB,GAA9BqB,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACPC,EAAYC,YAAcF,EAAYJ,GAAtCK,QAER,OADAE,QAAQC,IAAIH,GAEV,gDAAOI,IAAKT,GAAWb,GAAvB,cACE,sBAAMuB,SAAUP,EAAMQ,QAAQD,SAA9B,SACE,gEAA0BtB,GAA1B,IAAyCwB,KAAMf,gBAEjD,sBAAMa,SAAUP,EAAMQ,QAAQD,SAAUG,YAAa,IAArD,SACE,gEAA0BzB,GAA1B,IAAyCU,aAAc,IAAML,MAAM,iBAM3ES,IAAQY,QAAQhC,G,4CCRDiC,MArBf,WACE,OACE,mCACE,eAAC,IAAD,CAAQC,iBAAiB,EAAMC,qBAAmB,EAACC,WAAY,CAAC,EAAG,GAAIC,OAAQ,CAAEC,SAAU,CAAC,EAAG,EAAG,OAAlG,UACE,kCAAkBA,SAAU,CAAC,GAAI,GAAI,GAAIC,UAAW,IACpD,kCAAkBD,SAAU,EAAE,IAAK,IAAK,GAAIC,UAAW,IACvD,iCACA,4BAAYD,SAAU,CAAC,GAAI,GAAI,MAC/B,cAACE,EAAA,EAAD,IACA,cAAC,WAAD,CAAUC,SAAU,cAACC,EAAA,EAAD,wBAApB,SACE,cAACC,EAAA,EAAD,CAAOC,YAAY,SAASL,UAAW,GAAIM,eAAe,EAAMC,SAAS,EAAzE,SACE,cAAC,EAAD,QAIJ,cAACC,EAAA,EAAD,UCrBOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.169c5fdb.chunk.js","sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport * as THREE from 'three'\nimport React, { useRef } from 'react'\nimport { useGLTF, useAnimations, useTexture } from '@react-three/drei'\n// import { RepeatWrapping } from '@three'\n\nconst filePath = window.location.href + '/Monkey.glb'\n\nexport default function Model(props) {\n  const texture = useTexture(window.location.href + '/flakes.png')\n\n  const materialProps = {\n    clearcoat: 1.0,\n    clearcoatRoughness: 0,\n    metalness: 0.65,\n    roughness: 0.3,\n    color: 'red',\n    normalMap: texture,\n    normalScale: [0.3, 0.3],\n    'normalMap-wrapS': THREE.RepeatWrapping,\n    'normalMap-wrapT': THREE.RepeatWrapping,\n    'normalMap-repeat': [30, 30],\n    'normalMap-anisotropy': 16,\n    transmission: 0.6,\n    transparent: true\n    // opacity: .5\n  }\n\n  const group = useRef()\n  const { nodes, animations } = useGLTF(filePath)\n  const { actions } = useAnimations(animations, group)\n  console.log(actions)\n  return (\n    <group ref={group} {...props}>\n      <mesh geometry={nodes.Suzanne.geometry}>\n        <meshPhysicalMaterial {...materialProps} side={THREE.BackSide}/>\n      </mesh>\n      <mesh geometry={nodes.Suzanne.geometry} renderOrder={100}>\n        <meshPhysicalMaterial {...materialProps} transmission={0.95} color=\"black\" />\n      </mesh>\n    </group>\n  )\n}\n\nuseGLTF.preload(filePath)\n","import './App.css';\nimport Monkey from './components/Monkey'\nimport { OrbitControls, Stats, Html, Stage } from '@react-three/drei';\nimport { Canvas } from '@react-three/fiber';\nimport { Suspense } from 'react'\n\n// Environment options:\n//   sunset\n//   dawn\n//   night\n//   warehouse\n//   forest\n//   apartment\n//   studio\n//   city\n//   park\n//   lobby\n\nfunction App() {\n  return (\n    <>\n      <Canvas colorManagement={true} invalidateFrameloop pixelRatio={[1, 2]} camera={{ position: [0, 0, 2.75] }}>\n        <directionalLight position={[10, 10, 5]} intensity={1} />\n        <directionalLight position={[-10, -10, -5]} intensity={1} />\n        <ambientLight />\n        <pointLight position={[10, 10, 10]} />\n        <OrbitControls />\n        <Suspense fallback={<Html>loading..</Html>}>\n          <Stage environment=\"sunset\" intensity={.5} contactShadow={true} shadows={true}>\n            <Monkey />\n\n          </Stage>\n        </Suspense>\n        <Stats />\n      </Canvas>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}